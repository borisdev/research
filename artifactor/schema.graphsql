
input DateRangeFilter {
    gt: String
    lt: String
}

input RangeFilter {
    gt: Int
    lt: Int
}

type MirrorPost {
    _cursor: String
    account: String
    body: String
    contributor: String
    digest: String
    originalDigest: String
    timestamp: String
    title: String
    blockHeight: Int
    transactionId: String
}

input MirrorPostFilter {
    account: String
    accountSet: [String!]
    contributor: String
    contributorSet: [String!]
    digest: String
    digestSet: [String!]
    originalDigest: String
    originalDigestSet: [String!]
    timestamp: String
    timestampDateRange: DateRangeFilter
    title: String
    titleSet: [String!]
    blockHeight: Int
    transactionId: String
}

type ENSProfileAddresses {
    _cursor: String
    node: String
    coinType: Int
    address: String
    blockNumber: Int
    transactionIndex: Int
    logIndex: Int
}

type ENSProfileAttributes {
    _cursor: String
    node: String
    textKey: String
    textValue: String
    blockNumber: Int
    transactionIndex: Int
    logIndex: Int
}

type ENSProfile {
    _cursor: String
    expires: String
    name: String
    node: String
    tokenId: String
    owner: String
        addresses: [ENSProfileAddresses!]
        attributes: [ENSProfileAttributes!]
        contenthash: String
}

input ENSProfileFilter {
    name: String
    nameSet: [String!]
    node: String
    nodeSet: [String!]
    tokenId: String
    tokenIdSet: [String!]
    owner: String
    ownerSet: [String!]
    textValue: String
    textValueSet: [String!]
}

type OwnedNFT {
    _cursor: String
    chain: String
    contractAddress: String
    tokenId: String
    tokenType: String
    from: String
    to: String
    tokenIds: String
    blockNumber: Int
    transactionIndex: Int
    logIndex: Int
    owner: String
    balance: String
}

input OwnedNFTFilter {
    chain: String
    chainSet: [String!]
    contractAddress: String
    contractAddressSet: [String!]
    tokenId: String
    tokenIdSet: [String!]
    tokenType: String
    blockNumber: Int
    blockNumberRange: RangeFilter
    transactionIndex: Int
    transactionIndexRange: RangeFilter
    logIndex: Int
    logIndexRange: RangeFilter
    owner: String
    ownerSet: [String!]
    balance: String
    balanceSet: [String!]
}

type PriceUpdate {
    _cursor: String
    blockNumber: Int
    contractAddress: String
    price: String
    priceTimestamp: String
    base: String
    quote: String
    decimals: Int
}

input PriceUpdateFilter {
    blockNumber: Int
    blockNumberRange: RangeFilter
    contractAddress: String
    contractAddressSet: [String!]
    priceTimestamp: String
    priceTimestampDateRange: DateRangeFilter
    base: String
    baseSet: [String!]
    quote: String
    quoteSet: [String!]
    decimals: Int
}

type PriceMovingAverage {
    _cursor: String
    base: String
    price: String
    decimals: Int
    quote: String
    timestamp: String
    spot: String
    ma1day: String
    ma7day: String
    ma15day: String
    ma30day: String
}

input PriceMovingAverageFilter {
    base: String
    baseSet: [String!]
    decimals: Int
    quote: String
    quoteSet: [String!]
    timestamp: String
    timestampDateRange: DateRangeFilter
    spot: String
    ma1day: String
    ma7day: String
    ma15day: String
    ma30day: String
}

type EthereumOrderBook {
    _cursor: String
    contractAddress: String
    endTime: String
    isAsk: Boolean
    marketplace: String
    price: String
    signer: String
    startTime: String
    tokenId: String
    blockHeight: Int
    transactionId: String
}

input EthereumOrderBookFilter {
    contractAddress: String
    contractAddressSet: [String!]
    isAsk: Boolean
    signer: String
    signerSet: [String!]
    tokenId: String
    tokenIdSet: [String!]
    blockHeight: Int
    transactionId: String
}

type ArtistToken {
    _cursor: String
    artistAddress: String
    chain: String
    contractAddress: String
    metadata: ArtistTokenMetadatum
    owner: String
    owners: [ArtistTokenOwner!]
    platform: String
    projectName: String
    recentTransferBlock: Int
    tokenId: String
}

type ArtistTokenOwner {
    balance: String
    blockNumber: Int
    chain: String
    contractAddress: String
    logIndex: Int
    owner: String
    tokenId: String
    tokenIds: String
    tokenType: String
    transactionIndex: Int
}

type ArtistTokenMetadatum {
    chain: String
    contractAddress: String
    description: String
    image: String
    json: String
    name: String
    tokenId: String
}

input ArtistTokenFilter {
    artistAddress: String
    artistAddressSet: [String!]
    chain: String
    chainSet: [String!]
    contractAddress: String
    contractAddressSet: [String!]
    owner: String
    ownerSet: [String!]
    platform: String
    platformSet: [String!]
    projectName: String
    projectNameSet: [String!]
    recentTransferBlock: Int
    recentTransferBlockRange: RangeFilter
    tokenId: String
    tokenIdSet: [String!]
}

type NFTTransfer {
    _cursor: String
    amount: String
    amounts: [String]
    blockNumber: Int
    contractAddress: String
    from: String
    logIndex: Int
    opHash: String
    to: String
    tokenId: String
    tokenIds: [String]
    transactionIndex: Int
    txValueETH: String
}

input NFTTransferFilter {
    blockNumber: Int
    blockNumberRange: RangeFilter
    contractAddress: String
    contractAddressSet: [String!]
    from: String
    fromSet: [String!]
    logIndex: Int
    logIndexRange: RangeFilter
    opHash: String
    opHashSet: [String!]
    to: String
    toSet: [String!]
    tokenId: String
    tokenIdSet: [String!]
    tokenIds: String
    tokenIdsSet: [String!]
    transactionIndex: Int
    transactionIndexRange: RangeFilter
}

enum SortDirectionType {
    Ascending
    Descending
}

input Pagination {
    after: String
    limit: Int
    sortKey: String
    sortDirection: SortDirectionType
}

type Query {
    blockByTimestamp(chain: String!, timestamp: String!): Int!

    ensAddressForName(name: String!): String

    ensNameForAddress(address: String!): String

    ping: Boolean

    tezosAddressForName(name: String!): String

    tezosNameForAddress(address: String!): String

    mirrorPosts(filters: MirrorPostFilter, pagination: Pagination): [MirrorPost!]!

    ensProfiles(filters: ENSProfileFilter, pagination: Pagination): [ENSProfile!]!

    ownedNfts(filters: OwnedNFTFilter, pagination: Pagination): [OwnedNFT!]!

    priceUpdates(filters: PriceUpdateFilter, pagination: Pagination): [PriceUpdate!]!

    priceMovingAverages(filters: PriceMovingAverageFilter, pagination: Pagination): [PriceMovingAverage!]!

    ethereumOrderBooks(filters: EthereumOrderBookFilter, pagination: Pagination): [EthereumOrderBook!]!

    artistTokens(filters: ArtistTokenFilter, pagination: Pagination): [ArtistToken!]!

    nftTransfers(filters: NFTTransferFilter, pagination: Pagination): [NFTTransfer!]!
}
  
